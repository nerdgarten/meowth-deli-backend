datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

// ---------------- ENUMS ----------------
enum Role {
    customer
    driver
    restaurant
    admin
}

enum WeekDay {
    sunday
    monday
    tuesday
    wednesday
    thursday
    friday
    saturday
}

enum OrderStatus {
    pending
    preparing
    delivered
    rejected
    success
}

enum PaymentType {
    cash
    mobilebanking
    creditcard
}

enum VerificationStatus {
    pending
    rejected
    success
}

enum CouponType {
    percent
    fixed
}

// ---------------- MODELS ----------------
model User {
    id                       Int     @id @default(autoincrement())
    email                    String  @unique
    password                 String
    accepted_term_of_service Boolean @default(false)
    accepted_pdpa            Boolean @default(false)
    accepted_cookie_tracking Boolean @default(false)

    roles             UserRole[]
    customer          Customer?
    driver            Driver?
    restaurant        Restaurant?
    notifications     Notification[]
    paymentMethods    PaymentMethod[]
    restaurantReviews RestaurantReview[]
    verifyTokens      VerifyToken[]
}

model UserRole {
    user_id Int
    role    Role @default(customer)

    user User @relation(fields: [user_id], references: [id])

    @@id([user_id, role])
}

model Customer {
    id        Int     @id
    firstname String
    lastname  String?
    image     String?
    tel       String

    user           User                 @relation(fields: [id], references: [id])
    locations      Location[]
    favorites      FavoriteRestaurant[]
    favoriteDishes FavoriteDish[]
    orders         Order[]
    couponUsages   CouponUsage[]
    driverReviews  DriverReview[]
}

model Location {
    id          Int    @id @default(autoincrement())
    customer_id Int
    location    String
    address     String

    customer Customer @relation(fields: [customer_id], references: [id])
}

model Driver {
    id                  Int                @id
    verification_status VerificationStatus @default(pending)
    is_available        Boolean            @default(false)
    firstname           String
    lastname            String?
    image               String?
    vehicle             String
    fee_rate            Float              @default(0.1)
    licence             String
    tel                 String

    user     User            @relation(fields: [id], references: [id])
    location DriverLocation?
    orders   Order[]
    reviews  DriverReview[]
}

model Restaurant {
    id                  Int                @id
    verification_status VerificationStatus @default(pending)
    is_available        Boolean            @default(false)
    name                String
    image               String?
    fee_rate            Float              @default(0.1)
    location            String
    detail              String?
    tel                 String

    user      User                 @relation(fields: [id], references: [id])
    tags      RestaurantTag[]
    gallery   RestaurantGallery[]
    times     AvailableTime[]
    dishes    Dish[]
    favorites FavoriteRestaurant[]
    reviews   RestaurantReview[]
}

model RestaurantTag {
    id            Int    @id @default(autoincrement())
    restaurant_id Int
    tag           String

    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
}

model RestaurantGallery {
    id            Int    @id @default(autoincrement())
    restaurant_id Int
    image         String

    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
}

model AvailableTime {
    id            Int      @id @default(autoincrement())
    restaurant_id Int
    week_day      WeekDay
    opening_time  DateTime
    closing_time  DateTime

    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Notification {
    id         Int       @id @default(autoincrement())
    user_id    Int
    title      String
    message    String?
    is_read    Boolean   @default(false)
    created_at DateTime?

    user User @relation(fields: [user_id], references: [id])
}

model DriverLocation {
    id              Int       @id
    latitude        Float
    longitude       Float
    last_updated_at DateTime?

    driver Driver @relation(fields: [id], references: [id])
}

model Dish {
    id              Int     @id @default(autoincrement())
    restaurant_id   Int
    name            String
    allergy         String?
    price           Float
    detail          String?
    is_out_of_stock Boolean @default(false)

    restaurant  Restaurant     @relation(fields: [restaurant_id], references: [id])
    favorites   FavoriteDish[]
    orderDishes OrderDish[]
}

model FavoriteRestaurant {
    customer_id   Int
    restaurant_id Int

    customer   Customer   @relation(fields: [customer_id], references: [id])
    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])

    @@id([customer_id, restaurant_id])
}

model FavoriteDish {
    customer_id Int
    dish_id     Int

    customer Customer @relation(fields: [customer_id], references: [id])
    dish     Dish     @relation(fields: [dish_id], references: [id])

    @@id([customer_id, dish_id])
}

model PaymentMethod {
    id      Int         @id @default(autoincrement())
    user_id Int
    title   String
    type    PaymentType
    detail  String

    user     User      @relation(fields: [user_id], references: [id])
    payments Payment[]
}

model Coupon {
    id       Int        @id @default(autoincrement())
    code     String
    amount   Int        @default(0)
    value    Float      @default(1)
    type     CouponType @default(percent)
    is_empty Boolean    @default(false)

    usages CouponUsage[]
}

model CouponUsage {
    coupon_id   Int
    customer_id Int

    coupon   Coupon   @relation(fields: [coupon_id], references: [id])
    customer Customer @relation(fields: [customer_id], references: [id])

    @@id([coupon_id, customer_id])
}

model Payment {
    id                Int                @id @default(autoincrement())
    order_id          Int
    payment_method_id Int
    image             String?
    status            VerificationStatus @default(pending)

    order         Order         @relation(fields: [order_id], references: [id])
    paymentMethod PaymentMethod @relation(fields: [payment_method_id], references: [id])
}

model Order {
    id           Int         @id @default(autoincrement())
    customer_id  Int
    driver_id    Int?
    location     String
    status       OrderStatus @default(pending)
    remark       String?
    total_amount Float
    driver_fee   Float
    created_at   DateTime?
    updated_at   DateTime?

    customer    Customer    @relation(fields: [customer_id], references: [id])
    driver      Driver?     @relation(fields: [driver_id], references: [id])
    orderDishes OrderDish[]
    payments    Payment[]
}

model OrderDish {
    order_id Int
    dish_id  Int
    amount   Int     @default(1)
    remark   String?

    order Order @relation(fields: [order_id], references: [id])
    dish  Dish  @relation(fields: [dish_id], references: [id])

    @@id([order_id, dish_id])
}

model RestaurantReview {
    id            Int     @id @default(autoincrement())
    user_id       Int
    restaurant_id Int
    rate          Float
    review_text   String?

    user       User       @relation(fields: [user_id], references: [id])
    restaurant Restaurant @relation(fields: [restaurant_id], references: [id])
}

model DriverReview {
    id          Int     @id @default(autoincrement())
    customer_id Int
    driver_id   Int
    rate        Float
    review_text String?

    customer Customer @relation(fields: [customer_id], references: [id])
    driver   Driver   @relation(fields: [driver_id], references: [id])
}

model VerifyToken {
    user_id    Int
    token      String   @id @unique
    created_at DateTime @default(now())
    expires_at DateTime

    user User @relation(fields: [user_id], references: [id])
}
